----------------------------------------------------
The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.
Ex: const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) => accumulator + currentValue;

// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));
// expected output: 10

// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));
// expected output: 15

----------------------------------------------------
The reducer function takes four arguments:
	Accumulator (acc)
	Current Value (cur)
	Current Index (idx)
	Source Array (src)
Your reducer function's returned value is assigned to the accumulator
----------------------------------------------------
Syntax; arr.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])
----------------------------------------------------
Parameters: Callback: function to execute on each element in the array.
It takes four arguments:
	Accumulator: The accumulator accumulates callback's return values.
	CurrentValue: The current element being processed in the array.
	Index: The index of the current element being processed in the array.
	Array: The array reduce() was called upon.
	InitialValue: A value to use as the first argument to the first call of the callback.
----------------------------------------------------
The single value that results from the reduction.
----------------------------------------------------
The reduce() method executes the callback once for each assigned value present in the array, taking four arguments:
	Accumulator.
	CurrentValue.
	CurrentIndex.
	Array.
----------------------------------------------------
It is almost always safer to provide an initialValue, because there can be up to four possible output types without initialValue, as shown in the following example:

let maxCallback = ( acc, cur ) => Math.max( acc.x, cur.x );
let maxCallback2 = ( max, cur ) => Math.max( max, cur );

// reduce without initialValue
[ { x: 2 }, { x: 22 }, { x: 42 } ].reduce( maxCallback ); // NaN
[ { x: 2 }, { x: 22 }            ].reduce( maxCallback ); // 22
[ { x: 2 }                       ].reduce( maxCallback ); // { x: 2 }
[                                ].reduce( maxCallback ); // TypeError

// map & reduce with initialValue; better solution, also works for empty or larger arrays
[ { x: 22 }, { x: 42 } ].map( el => el.x )
                        .reduce( maxCallback2, -Infinity );
----------------------------------------------------
The value os reduce() will b the last callback.
Ex: [0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {
  return accumulator + currentValue
})
----------------------------------------------------
And if you put an InitialValue, the result would change too.
Ex: [0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => {
    return accumulator + currentValue
}, 10)
----------------------------------------------------
If the implementations does not support reduce(), use this code:
// Production steps of ECMA-262, Edition 5, 15.4.4.21
// Reference: http://es5.github.io/#x15.4.4.21
// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
if (!Array.prototype.reduce) {
  Object.defineProperty(Array.prototype, 'reduce', {
    value: function(callback /*, initialValue*/) {
      if (this === null) {
        throw new TypeError( 'Array.prototype.reduce ' + 
          'called on null or undefined' );
      }
      if (typeof callback !== 'function') {
        throw new TypeError( callback +
          ' is not a function');
      }

      // 1. Let O be ? ToObject(this value).
      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      var len = o.length >>> 0; 

      // Steps 3, 4, 5, 6, 7      
      var k = 0; 
      var value;

      if (arguments.length >= 2) {
        value = arguments[1];
      } else {
        while (k < len && !(k in o)) {
          k++; 
        }

        // 3. If len is 0 and initialValue is not present,
        //    throw a TypeError exception.
        if (k >= len) {
          throw new TypeError( 'Reduce of empty array ' +
            'with no initial value' );
        }
        value = o[k++];
      }

      // 8. Repeat, while k < len
      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kPresent be ? HasProperty(O, Pk).
        // c. If kPresent is true, then
        //    i.  Let kValue be ? Get(O, Pk).
        //    ii. Let accumulator be ? Call(
        //          callbackfn, undefined,
        //          « accumulator, kValue, k, O »).
        if (k in o) {
          value = callback(value, o[k], k, o);
        }

        // d. Increase k by 1.      
        k++;
      }

      // 9. Return accumulator.
      return value;
    }
  });
}

----------------------------------------------------