----------------------------------------------------
The filter() method creates a new array with all elements that pass the test implemented by the provided function.
Ex: const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]
This code will get the words with more than 6 letters. 
----------------------------------------------------
Syntax: let newArray = arr.filter(callback(element[, index, [array]])[, thisArg])
----------------------------------------------------
Callback: Function is a predicate, to test each element of the array. Return true to keep the element, false otherwise.
It accepts 3 arguments:
	Element: The current element being processed in the array.
	Index: The index of the current element being processed in the array.
	Array: The array filter was called upon.
	ThisArg: Value to use as this when executing callback.
----------------------------------------------------
A new array with the elements that pass the test. If no elements pass the test, an empty array will be returned
.
----------------------------------------------------
filter() calls a provided callback function once for each element in an array, and constructs a new array of all the values for which callback returns a value that coerces to true.
----------------------------------------------------
callback is invoked with three arguments:
	The value of the element.
	The index of the element.
	The Array object being traversed.
----------------------------------------------------
filter() does not mutate the array on which it is called.
----------------------------------------------------
This function can be implemented if the implementation does not support it.
if (!Array.prototype.filter){
  Array.prototype.filter = function(func, thisArg) {
    'use strict';
    if ( ! ((typeof func === 'Function' || typeof func === 'function') && this) )
        throw new TypeError();
   
    var len = this.length >>> 0,
        res = new Array(len), // preallocate array
        t = this, c = 0, i = -1;

    var kValue;
    if (thisArg === undefined){
      while (++i !== len){
        // checks to see if the key was set
        if (i in this){
          kValue = t[i]; // in case t is changed in callback
          if (func(t[i], i, t)){
            res[c++] = kValue;
          }
        }
      }
    }
    else{
      while (++i !== len){
        // checks to see if the key was set
        if (i in this){
          kValue = t[i];
          if (func.call(thisArg, t[i], i, t)){
            res[c++] = kValue;
          }
        }
      }
    }
   
    res.length = c; // shrink down array to proper size
    return res;
  };
}
----------------------------------------------------