----------------------------------------------------
JavaScript has a built-in functions that support an arbitrary number of arguments.
Ex: 	Math.max(arg1, arg2, ..., argN) – returns the greatest of the arguments.
	Object.assign(dest, src1, ..., srcN) – copies properties from src1..N into dest.
----------------------------------------------------
A function can be called with any number of arguments, no matter how it is defined.
Ex: function sum(a, b) {
  return a + b;
}

alert( sum(1, 2, 3, 4, 5) );
----------------------------------------------------
There will be no error for big arguments. But just the first 2 will be counted.
----------------------------------------------------
To gather all the arguments, you can use 3 dots(...) followed by the name.
Ex: function sumAll(...args) { // args is the name for the array
  let sum = 0;

  for (let arg of args) sum += arg;

  return sum;
}

alert( sumAll(1) ); // 1
alert( sumAll(1, 2) ); // 3
alert( sumAll(1, 2, 3) ); // 6
----------------------------------------------------
You can combine variables and gather the elements.
Ex: function showName(firstName, lastName, ...titles) {
  alert( firstName + ' ' + lastName ); // Julius Caesar

  // the rest go into titles array
  // i.e. titles = ["Consul", "Imperator"]
  alert( titles[0] ); // Consul
  alert( titles[1] ); // Imperator
  alert( titles.length ); // 2
}

showName("Julius", "Caesar", "Consul", "Imperator");
----------------------------------------------------
The ...rest must always be last.
----------------------------------------------------
There is also a special array-like object named arguments that contains all arguments by their index.
Ex: function showName() {
  alert( arguments.length );
  alert( arguments[0] );
  alert( arguments[1] );

  // it's iterable
  // for(let arg of arguments) alert(arg);
}

// shows: 2, Julius, Caesar
showName("Julius", "Caesar");

// shows: 1, Ilya, undefined (no second argument)
showName("Ilya");
----------------------------------------------------
Math.max: returns the greatest number from a list.
Ex: alert( Math.max(3, 5, 1) ); // 5
----------------------------------------------------
When ...arr is used in the function call, it “expands” an iterable object arr into the list of arguments.
Ex: let arr = [3, 5, 1];

alert( Math.max(...arr) ); // 5 (spread turns array into a list of arguments)

You can combine arrays with commas(,), add numbers too and merge syntax.
----------------------------------------------------
Merging syntax: let arr = [3, 5, 1];
let arr2 = [8, 9, 15];

let merged = [0, ...arr, 2, ...arr2];

alert(merged); // 0,3,5,1,2,8,9,15 (0, then arr, then 2, then arr2)
----------------------------------------------------
Array.from: converts an iterable (like a string) into an array.
Ex: let str = "Hello";

// Array.from converts an iterable into an array
alert( Array.from(str) ); // H,e,l,l,o
The result is the same as [...str].
----------------------------------------------------
There’s a difference between Array.from(obj) and [...obj]:
	Array.from operates on both array-likes and iterables.
	The spread syntax works only with iterables.
----------------------------------------------------