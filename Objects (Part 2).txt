----------------------------------------------------
Computed properties: are an object literal with square bracket([]).
Ex: let fruit = prompt("Which fruit to buy?", "apple");

let bag = {
  [fruit]: 5, // the name of the property is taken from the variable fruit
};

alert( bag.apple ); // 5 if fruit="apple"
[fruit] means that the property name should be taken from fruit.
----------------------------------------------------
With [] you can create something more complex:
let fruit = 'apple';
let bag = {
  [fruit + 'Computers']: 5 // bag.appleComputers = 5
};
----------------------------------------------------
Basicaly, you'll use the dot notation with simple and know properties names. And we use squere brackets([]) with more complex stuff.
----------------------------------------------------
There is a shorthand for some properties name, like instead of:
function makeUser(name, age) {
  return {
    name: name,
    age: age,
    // ...other properties
  };
}

let user = makeUser("John", 30);
alert(user.name); // John

You can simply:
function makeUser(name, age) {
  return {
    name, // same as name: name
    age,  // same as age: age
    // ...
  };
}
And you can combine both.
----------------------------------------------------
A variable cannot have the same name as it value, but for an object it's diferent.
Ex: // these properties are all right
let obj = {
  for: 1,
  let: 2,
  return: 3
};

alert( obj.for + obj.let + obj.return );  // 6
----------------------------------------------------
In propeties names "" or without is the same thing:
let obj = {
  0: "test" // same as "0": "test"
};

// both alerts access the same property (the number 0 is converted to string "0")
alert( obj["0"] ); // test
alert( obj[0] ); // test (same property)
----------------------------------------------------
The operator In will be true if the property exist. ("key" in object)
Ex: let user = { name: "John", age: 30 };

alert( "age" in user ); // true, user.age exists
alert( "blabla" in user ); // false, user.blabla doesn't exist
----------------------------------------------------
When an object property exists, but stores undefined. Is when the operator In comes in.
Ex: let obj = {
  test: undefined
};

alert( obj.test ); // it's undefined, so - no such property?

alert( "test" in obj ); // true, the property does exist! 
----------------------------------------------------
For: execute the properties in the order they were writen.
Ex: for (key in object) {
  // executes the body for each key among object properties
}
---------
let user = {
  name: "John",
  age: 30,
  isAdmin: true
};

for (let key in user) {
  // keys
  alert( key );  // name, age, isAdmin
  // values for the keys
  alert( user[key] ); // John, 30, true
}
----------------------------------------------------
You can change the order that will execute the properties.
Ex: let codes = {
  "49": "Germany",
  "41": "Switzerland",
  "44": "Great Britain",
  // ..,
  "1": "USA"
};

for (let code in codes) {
  alert(code); // 1, 41, 44, 49
}
If the keys are integer they follow a order, but if they're not the follow their order of criation.
----------------------------------------------------
But you can turn a integer into a non-integer, by adding a +.
Ex: et codes = {
  "+49": "Germany",
  "+41": "Switzerland",
  "+44": "Great Britain",
  // ..,
  "+1": "USA"
};

for (let code in codes) {
  alert( +code ); // 49, 41, 44, 1
}
----------------------------------------------------
Objects are associative arrays with several special features.
They store properties (key-value pairs), where:
	Property keys must be strings or symbols (usually strings).
	Values can be of any type.
----------------------------------------------------
To access a property, we can use:
	The dot notation: obj.property.
	Square brackets notation obj["property"]. Square brackets allow to take the key from a variable, like obj[varWithKey].
----------------------------------------------------
Additional operators:
	To delete a property: delete obj.prop.
	To check if a property with the given key exists: "key" in obj.
	To iterate over an object: for (let key in obj) loop.
----------------------------------------------------